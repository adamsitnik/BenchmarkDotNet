using System;
using System.IO;
using System.Reflection;
using BenchmarkDotNet.Extensions;
using BenchmarkDotNet.Helpers;
using BenchmarkDotNet.Plugins.Loggers;
using BenchmarkDotNet.Plugins.Toolchains.Classic;
using BenchmarkDotNet.Tasks;
using BenchmarkDotNet.Portability;

namespace BenchmarkDotNet.Plugins.Toolchains.Dnx
{
    internal class BenchmarkDnxGenerator : BenchmarkClassicGenerator
    {
        private const string ProjectFileName = "project.json";

        public BenchmarkDnxGenerator(IBenchmarkLogger logger) : base(logger)
        {
        }

        internal static string GetDirectoryPath()
        {
            // to make it working in VS I had to put it closer to VS solution root folder
            // at the same level as other projects
            return Path.Combine(Directory.GetCurrentDirectory(), @"..\", "BenchmarkDotNet.Autogenerated");
        }

        protected override string GetDirectoryPath(Benchmark benchmark)
        {
            return GetDirectoryPath();
        }

        protected override void GenerateProjectFile(string projectDir, Benchmark benchmark)
        {
            var template = ResourceHelper.LoadTemplate("BenchmarkProject.json");

            var content = SetPlatform(template, benchmark.Task.Configuration.Platform);
            content = SetDependencyToExecutingAssembly(content, benchmark.Target.Type);
            content = SetDependencyToMyself(content);
            content = SetTargetFramework(content);
    
            var projectJsonFilePath = Path.Combine(projectDir, ProjectFileName);

            File.WriteAllText(projectJsonFilePath, content);
        }

        protected override void GenerateProjectBuildFile(string projectDir)
        {
            // do nothing on purpose, we do not need bat file
        }

        private static string SetPlatform(string template, BenchmarkPlatform platform)
        {
            return template.Replace("$PLATFORM", platform.ToConfig());
        }

        private static string SetDependencyToExecutingAssembly(string template, Type benchmarkTarget)
        {
            var assemblyName = benchmarkTarget.Assembly().GetName();
            var packageVersion = GetPackageVersion(assemblyName);

            return template
                .Replace("$EXECUTINGASSEMBLYVERSION", packageVersion) 
                .Replace("$EXECUTINGASSEMBLY", assemblyName.Name);
        }

        private static string SetDependencyToMyself(string template)
        {
            var assemblyName = typeof(BenchmarkDnxGenerator).Assembly().GetName();
            var packageVersion = GetPackageVersion(assemblyName);
            var targetType = GetTargetType();

            return template
                .Replace("$VERSION", packageVersion)
                .Replace("$TARGETTYPE", targetType);
        }

        private static string SetTargetFramework(string content)
        {
#if DNX451
            return content.Replace("$TARGETFRAMEWORK", "dnx451");
#elif CORE
            return content.Replace("$TARGETFRAMEWORK", "dnxcore50");
#else
            throw new InvalidOperationException("should have never happened");
#endif
        }

        /// <summary>
        /// we can not simply call assemblyName.Version.ToString() because it is different than package version which can contain (and often does) text
        /// we are using the wildcard to get latest version of package/project restored
        /// </summary>
        private static string GetPackageVersion(AssemblyName assemblyName)
        {
            return $"{assemblyName.Version.Major}.{assemblyName.Version.Minor}.{assemblyName.Version.Build}-*";
        }

        /// <summary>
        /// for our development our auto-generated dll should reference project of BenchmarkDotNet, 
        /// not the existing nuget package
        /// for production it should point to package, not project
        /// otherwise dnu/nuget would point to the old package which could cause a lot of problems
        /// </summary>
        /// <returns></returns>
        private static string GetTargetType() => EnvironmentInfo.IsPublishedNuget ?  "package" : "project";
    }
}